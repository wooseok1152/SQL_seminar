-- DEPT테이블과 EMP테이블 INNER JOIN
SELECT B.ENO,
       B.ENAME,
       B.SEX,
       B.JOB,
       B.SAL,
       A.DNO,
       A.DNAME
FROM SYSTEM.DEPT A,
     SYSTEM.EMP B
WHERE A.DNO = B.DNO;

-- STUDENT테이블, SCORE테이블, COURSE테이블 INNER JOIN
SELECT A.SNAME,
       C.CNAME,
       B.RESULT
FROM SYSTEM.STUDENT A,
     SYSTEM.SCORE B,
     SYSTEM.COURSE C
WHERE A.SNO = B.SNO
      AND B.CNO = C.CNO
ORDER BY A.SNAME;

-- EMP테이블과 DEPT테이블 LEFT OUTER JOIN
SELECT A.ENO,
       A.ENAME,
       A.SEX,
       A.JOB,
       A.SAL,
       B.DNO,
       B.DNAME
FROM SYSTEM.EMP A
LEFT JOIN
SYSTEM.DEPT B
ON (A.DNO = B.DNO);

-- DEPT테이블 GROUP BY 실시
SELECT A.DNO,
       B.DNAME,
       SUM(A.SAL) AS SAL_SUM
FROM SYSTEM.EMP A,
     SYSTEM.DEPT B
WHERE A.DNO = B.DNO
GROUP BY A.DNO, B.DNAME;

-- ORDER BY 오름차순
SELECT B.DNO,
       B.DNAME,
       SUM(A.SAL) AS SAL_SUM
FROM SYSTEM.EMP A,
     SYSTEM.DEPT B
WHERE A.DNO = B.DNO
GROUP BY B.DNO, B.DNAME
ORDER BY B.DNO;

-- ORDER BY 내림차순
SELECT B.DNO,
       B.DNAME,
       SUM(A.SAL) AS SAL_SUM
FROM SYSTEM.EMP A,
     SYSTEM.DEPT B
WHERE A.DNO = B.DNO
GROUP BY B.DNO, B.DNAME
ORDER BY B.DNO DESC;

-- CASE 구문 예시1
SELECT A.ENO,
       A.ENAME,
       A.SEX,
       A.JOB,
       A.SAL,
       CASE 
            WHEN B.DNO IS NULL THEN 'EMPTY'
            ELSE B.DNO
       END AS DNO,
       CASE
            WHEN B.DNAME IS NULL THEN 'EMPTY'
            ELSE B.DNAME
       END AS DNAME
FROM SYSTEM.EMP A
LEFT JOIN
SYSTEM.DEPT B
ON (A.DNO = B.DNO);

-- CASE 구문 예시2
SELECT SNO,
       SNAME,
       SEX,
       SYEAR,
       CASE
            WHEN SYEAR = 4 THEN 1
            ELSE 0
       END AS IS_SENIOR,
       MAJOR,
       AVR
FROM SYSTEM.STUDENT;

-- CASE 구문 예시3
SELECT SNO,
       SNAME,
       SEX,
       CASE
            WHEN SYEAR = 1 THEN '1학년'
            WHEN SYEAR = 2 THEN '2학년'
            WHEN SYEAR = 3 THEN '3학년'
            WHEN SYEAR = 4 THEN '4학년'
            ELSE '고학년'
       END AS SYEAR_STR,
       MAJOR,
       AVR
FROM SYSTEM.STUDENT;

-- CONCAT() 예시
SELECT SNO,
       SNAME,
       SEX,
       TO_CHAR(SYEAR) || '학년' AS SYEAR_STR,
       MAJOR,
       AVR
FROM SYSTEM.STUDENT;

-- SUBSTR() 예시1
SELECT SUBSTR(DATE_CHAR, 1, 4) || '년' AS YEAR_,
       SUBSTR(DATE_CHAR, 5, 2) || '월' AS MONTH_,
       SUBSTR(DATE_CHAR, 7, 2) || '일' AS DATE_
FROM (
    SELECT '20210101' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20220205' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20230315' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20240420' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20250530' AS DATE_CHAR
    FROM DUAL
)
;

-- SUBSTR() 예시2
SELECT SUBSTR(DATE_CHAR, 1, 4) || '년' AS YEAR_,
       CASE 
            WHEN SUBSTR(DATE_CHAR, 5, 1) = '0' THEN SUBSTR(DATE_CHAR, 6, 1)
            ELSE SUBSTR(DATE_CHAR, 5, 2)
       END || '월' AS MONTH_,
       CASE 
            WHEN SUBSTR(DATE_CHAR, 7, 1) = '0' THEN SUBSTR(DATE_CHAR, 8, 1)
            ELSE SUBSTR(DATE_CHAR, 7, 2)
       END || '일' AS DATE_
FROM (
    SELECT '20210101' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20220205' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20230315' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20240420' AS DATE_CHAR
    FROM DUAL
    UNION ALL
    SELECT '20250530' AS DATE_CHAR
    FROM DUAL
)
;

-- WINDOW AVG() 예시1
SELECT A.SNO,
       A.SYEAR,
       A.SNAME,
       B.CNO,
       B.CNAME,
       C.RESULT,
       AVG(C.RESULT) OVER(PARTITION BY B.CNO) AS AVG_RESULT_BY_CNO
FROM SYSTEM.STUDENT A,
     SYSTEM.COURSE B,
     SYSTEM.SCORE C
WHERE A.SNO = C.SNO
      AND B.CNO = C.CNO;

-- WINDOW AVG() 예시2
SELECT A.SNO,
       A.SYEAR,
       A.SNAME,
       B.CNO,
       B.CNAME,
       C.RESULT,
       AVG(C.RESULT) OVER(PARTITION BY B.CNO) AS AVG_RESULT_BY_CNO,
       CASE 
            WHEN C.RESULT >= AVG(C.RESULT) OVER(PARTITION BY B.CNO) THEN '1'
            ELSE '0'
       END AS IS_OVER_AVG
FROM SYSTEM.STUDENT A,
     SYSTEM.COURSE B,
     SYSTEM.SCORE C
WHERE A.SNO = C.SNO
      AND B.CNO = C.CNO;

-- RANK(), DENSE_RANK(), ROW_NUMBER() 예시
SELECT SNAME,
       RESULT,
       RANK() OVER(ORDER BY RESULT DESC) AS RANK_FUNCTION,
       DENSE_RANK() OVER(ORDER BY RESULT DESC) AS DENSE_RANK_FUNCTION,
       ROW_NUMBER() OVER(ORDER BY RESULT DESC) AS ROW_NUMBER_FUNCTION
FROM (     
    SELECT '오우재' AS SNAME,
           71 AS RESULT
    FROM DUAL
    UNION ALL
    SELECT '신형일' AS SNAME,
           80 AS RESULT
    FROM DUAL
    UNION ALL
    SELECT '최혜원' AS SNAME,
           92 AS RESULT
    FROM DUAL
    UNION ALL
    SELECT '유지아' AS SNAME,
           92 AS RESULT
    FROM DUAL
);
    
-- WINDOW ROW_NUMBER() 예시
SELECT A.SNO,
       A.SYEAR,
       A.SNAME,
       B.CNO,
       B.CNAME,
       C.RESULT,
       ROW_NUMBER() OVER(PARTITION BY B.CNO, SYEAR ORDER BY C.RESULT DESC) AS RNK_BY_CNO_N_SYEAR
FROM SYSTEM.STUDENT A,
     SYSTEM.COURSE B,
     SYSTEM.SCORE C
WHERE A.SNO = C.SNO
      AND B.CNO = C.CNO;

-- WINDOW FIRST_VALUE() 예시
SELECT A.SNO,
       A.SYEAR,
       A.SNAME,
       B.CNO,
       B.CNAME,
       C.RESULT,
       FIRST_VALUE(C.RESULT) OVER(PARTITION BY B.CNO, A.SYEAR ORDER BY C.RESULT DESC) AS MAX_RESULT_BY_CNO_N_SYEAR,
       FIRST_VALUE(C.RESULT) OVER(PARTITION BY B.CNO, A.SYEAR ORDER BY C.RESULT) AS MIN_RESULT_BY_CNO_N_SYEAR,
       ABS(C.RESULT - FIRST_VALUE(C.RESULT) OVER(PARTITION BY B.CNO, A.SYEAR ORDER BY C.RESULT DESC)) AS COMPARED_WITH_MAX,
       ABS(C.RESULT - FIRST_VALUE(C.RESULT) OVER(PARTITION BY B.CNO, A.SYEAR ORDER BY C.RESULT)) AS COMPARED_WITH_MIN
FROM SYSTEM.STUDENT A,
     SYSTEM.COURSE B,
     SYSTEM.SCORE C
WHERE A.SNO = C.SNO
      AND B.CNO = C.CNO;
      
-- LAG() 예시
SELECT SHRT_IS_CD, 
       BSNSS_DT,
       CLS_PRC,
       LAG(CLS_PRC) OVER(PARTITION BY SHRT_IS_CD ORDER BY BSNSS_DT) AS BFR_CLS_PRC,
       CLS_PRC - LAG(CLS_PRC) OVER(PARTITION BY SHRT_IS_CD ORDER BY BSNSS_DT) AS CHANGE_AMT
FROM (
    SELECT 'A005930' AS SHRT_IS_CD, 
           '20210415' AS BSNSS_DT,
           84100 AS CLS_PRC
    FROM DUAL
    UNION ALL
    SELECT 'A005930' AS SHRT_IS_CD,
           '20210416' AS BSNSS_DT,
           83900 AS CLS_PRC
    FROM DUAL
    UNION ALL
    SELECT 'A005930' AS SHRT_IS_CD,
           '20210419' AS BSNSS_DT,
           83300 AS CLS_PRC
    FROM DUAL
    UNION ALL
    SELECT 'A005380' AS SHRT_IS_CD,
           '20210415' AS BSNSS_DT,
           230500 AS CLS_PRC
    FROM DUAL
    UNION ALL
    SELECT 'A005380' AS SHRT_IS_CD,
           '20210416' AS BSNSS_DT,
           231500 AS CLS_PRC
    FROM DUAL
    UNION ALL
    SELECT 'A005380' AS SHRT_IS_CD,
           '20210419' AS BSNSS_DT,
           230000 AS CLS_PRC
    FROM DUAL
);

-- '기간'을 나타내는 컬럼 생성 예시1
SELECT PNO,
       PNAME,
       HIREDATE,
       TRUNC(SYSDATE) - HIREDATE AS PERIODE
FROM SYSTEM.PROFESSOR;

-- '기간'을 나타내는 컬럼 생성 예시2
SELECT PNO,
       PNAME,
       HIREDATE,
       PERIODE,
       RNK
FROM (
    SELECT PNO,
           PNAME,
           HIREDATE,
           TRUNC(SYSDATE) - HIREDATE AS PERIODE,
           ROW_NUMBER() OVER(ORDER BY TRUNC(SYSDATE) - HIREDATE DESC) AS RNK
    FROM SYSTEM.PROFESSOR
)
WHERE RNK <= 3;

SELECT PNO,
       PNAME,
       HIREDATE
FROM SYSTEM.PROFESSOR;

-- ADD_MONTHS() 예시
SELECT PNO, 
       PNAME, 
       HIREDATE,
       ADD_MONTHS(HIREDATE, 1) AS ONE_MONTH_PLUS,
       TO_CHAR(ADD_MONTHS(HIREDATE, 1), 'YYYY/MM/DD') AS ONE_MONTH_PLUS_WITH_FORMAT,
       ADD_MONTHS(HIREDATE, -1) AS ONE_MONTH_MINUS,
       TO_CHAR(ADD_MONTHS(HIREDATE, -1), 'YYYY/MM/DD') AS ONE_MONTH_MINUS_WITH_FORMAT
FROM SYSTEM.PROFESSOR;

-- 해당 월 말일과 전월 말일 산출 예시
SELECT TO_CHAR(HIREDATE, 'YYYY/MM/DD') AS STD_DT,
       TO_CHAR(LAST_DAY(HIREDATE), 'YYYY/MM/DD') AS LAST_DT,
       TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(HIREDATE, 'YYYYMMDD'), 1, 6) || '01') - 1, 'YYYY/MM/DD') AS BFR_MONTH_LAST_DT
FROM SYSTEM.PROFESSOR;

-- 행 기반의 테이블을 열 기반의 테이블로 변경하는 예시
SELECT SNAME,
       SUM(A_CNT) AS A_CNT,
       SUM(B_CNT) AS B_CNT,
       SUM(C_CNT) AS C_CNT,
       SUM(D_CNT) AS D_CNT,
       SUM(F_CNT) AS F_CNT
FROM (
    SELECT SNAME,
           CASE WHEN GRADE = 'A' THEN CNT ELSE 0 END AS A_CNT,
           CASE WHEN GRADE = 'B' THEN CNT ELSE 0 END AS B_CNT,
           CASE WHEN GRADE = 'C' THEN CNT ELSE 0 END AS C_CNT,
           CASE WHEN GRADE = 'D' THEN CNT ELSE 0 END AS D_CNT,
           CASE WHEN GRADE = 'F' THEN CNT ELSE 0 END AS F_CNT
    FROM (
        SELECT A.SNAME,
               D.GRADE,
               COUNT(*) AS CNT
        FROM SYSTEM.STUDENT A,
             SYSTEM.COURSE B,
             SYSTEM.SCORE C,
             SYSTEM.SCGRADE D
        WHERE A.SNO = C.SNO
              AND B.CNO = C.CNO
              AND C.RESULT <= D.HISCORE
              AND C.RESULT >= D.LOSCORE
              AND A.SNO IN ('944503', '925602')
        GROUP BY A.SNAME, D.GRADE
        ORDER BY A.SNAME, D.GRADE
    )
)
GROUP BY SNAME;



